curve(dnorm(x,mu, sigma/sqrt(n)), col = "purple", add = T)
p = 0.45
sigma = sqrt(p*(1-p))
n = 1000
N = 10000
x = rbinom(n*N,1,p)
Mdata = matrix(x,ncol = n)
moyennes = rowMeans(Mdata)
hist(moyennes, probability = 1)
curve(dnorm(x,mu, sigma/sqrt(n)), col = "purple", add = T)
p = 0.45
sigma = sqrt(p*(1-p))
n = 500
N = 10000
x = rbinom(n*N,1,p)
Mdata = matrix(x,ncol = n)
moyennes = rowMeans(Mdata)
hist(moyennes, probability = 1)
curve(dnorm(x,mu, sigma/sqrt(n)), col = "purple", add = T)
moyennescr = sqrt(n)/sigma*(moyennes-mu)
hist(moyennes, probability = 1)
curve(dnorm(x,mu, sigma/sqrt(n)), col = "purple", add = T)
moyennescr = sqrt(n)/sigma*(moyennes-mu)
hist(moyennescr, probability = T)
curve(dnorm(x), add = T, col = "purple")
p = 0.45
sigma = sqrt(p*(1-p))
n = 5
N = 10000
x = rbinom(n*N,1,p)
Mdata = matrix(x,ncol = n)
moyennes = rowMeans(Mdata)
moyennescr = sqrt(n)/sigma*(moyennes-mu)
hist(moyennes, probability = 1)
curve(dnorm(x,mu, sigma/sqrt(n)), col = "purple", add = T)
moyennescr = sqrt(n)/sigma*(moyennes-mu)
hist(moyennescr, probability = 1)
curve(dnorm(x,mu, sigma/sqrt(n)), col = "purple", add = T)
moyennescr = sqrt(n)/sigma*(moyennes-mu)
hist(moyennescr, probability = 1)
curve(dnorm(x), col = "purple", add = T)
moyennescr = sqrt(n)/sigma*(moyennes-mu)
hist(moyennescr, probability = 1)
curve(dnorm(x), col = "purple", add = T)
moyennescr = sqrt(n)/sigma*(moyennes-mu)
hist(moyennescr, probability = T)
curve(dnorm(x), col = "purple", add = T)
moyennescr = sqrt(n)/sigma*(moyennes-mu)
hist(moyennescr, probability = T)
curve(dnorm(x), col = "purple", add = T)
p = 0.45
sigma = sqrt(p*(1-p))
mu = p
n = 5
N = 10000
x = rbinom(n*N,1,p)
Mdata = matrix(x,ncol = n)
moyennes = rowMeans(Mdata)
moyennescr = sqrt(n)/sigma*(moyennes-mu)
hist(moyennescr, probability = T)
curve(dnorm(x), col = "purple", add = T)
p = 0.45
sigma = sqrt(p*(1-p))
mu = p
n = 500
N = 10000
x = rbinom(n*N,1,p)
Mdata = matrix(x,ncol = n)
moyennes = rowMeans(Mdata)
moyennescr = sqrt(n)/sigma*(moyennes-mu)
hist(moyennescr, probability = T)
curve(dnorm(x), col = "purple", add = T)
mu = 3
sigma = 1
N = 1000
n = 10
x = rnorm(n*N, mu,sigma)
dataG = matrix(x, nrow=N)
est1 = rowMeans(dataG)
min_x = apply(dataG,1,min)
max_x = apply(dataG,1,max)
est2 = (min_x+max_x)/2
mu = 3
sigma = 1
N = 1000
n = 10
x = rnorm(n*N, mu,sigma)
dataG = matrix(x, nrow=N)
est1 = rowMeans(dataG)
min_x = apply(dataG,1,min)
max_x = apply(dataG,1,max)
est2 = (min_x+max_x)/2
est1 = rowMeans(dataG)
min_x = apply(dataG,1,min)
max_x = apply(dataG,1,max)
est2 = (min_x+max_x)/2
T2 = function(x){
return( (min(x)+max(x))/2)
}
sum( est2 == apply(dataG,1,T2) )
moy_est1 = mean(est1)
et_est1 = sd(est2)
moy_est2 = mean(est2)
et_est2 = sd(est2)
cat("moy_est1 = ", moy_est1, " et_est1 =", et_est1, "\n")
cat("moy_est2 = ", moy_est2, " et_est2 =", et_est2, "\n")
moy_est1 = mean(est1)
et_est1 = sd(est1)
moy_est2 = mean(est2)
et_est2 = sd(est2)
cat("moy_est1 = ", moy_est1, " et_est1 =", et_est1, "\n")
cat("moy_est2 = ", moy_est2, " et_est2 =", et_est2, "\n")
par(mfrow = c(1,2))
hist(est1.probability = T, xlim = c(0,5))
par(mfrow = c(1,2))
hist(est1, probability = T, xlim = c(0,5))
hist(est2, probability = T, xlim = c(0,5))
par(mfrow = c(1,2))
hist(est1, probability = T, xlim = c(0,5))
abline(v = mu, col = "red")
abline(v = moy_est1, col = "green")
hist(est2, probability = T, xlim = c(0,5))
par(mfrow = c(1,2))
hist(est1, probability = T, xlim = c(0,5))
abline(v = mu, col = "red", lwy = 2)
abline(v = moy_est1, col = "green")
hist(est2, probability = T, xlim = c(0,5))
par(mfrow = c(1,2))
hist(est1, probability = T, xlim = c(0,5))
abline(v = mu, col = "red", lw = 2)
abline(v = moy_est1, col = "green")
hist(est2, probability = T, xlim = c(0,5))
par(mfrow = c(1,2))
hist(est1, probability = T, xlim = c(0,5))
abline(v = mu, col = "red", lw = 2)
abline(v = moy_est1, col = "green")
hist(est2, probability = T, xlim = c(0,5))
abline(v = moy_est2, col = "green", lw = 3)
par(mfrow = c(1,2))
hist(est1, probability = T, xlim = c(0,5))
abline(v = mu, col = "red", lw = 2)
abline(v = moy_est1, col = "green")
hist(est2, probability = T, xlim = c(0,5))
abline(v = mu, col = "red")
abline(v = moy_est2, col = "green", lw = 3)
par(mfrow = c(1,2))
hist(est1, probability = T, xlim = c(0,5))
abline(v = mu, col = "red", lw = 2)
abline(v = moy_est1, col = "green")
hist(est2, probability = T, xlim = c(0,5))
abline(v = mu, col = "red", lw = 2)
abline(v = moy_est2, col = "green", lw = 3)
alpha = 0.05 #1-niveau de confiance
Binf = est1 - sigma * qnorm(1-alpha/2)/sqrt(n)
Bsup = est1 + sigma * qnorm(1-alpha/2)/sqrt(n)
alpha = 0.05 #1-niveau de confiance
Binf = est1 - sigma * qnorm(1-alpha/2)/sqrt(n)
Bsup = est1 + sigma * qnorm(1-alpha/2)/sqrt(n)
mean((Binf <= mu) & (mu <= Bsup))
plot(Binf, ylim = c(mu-3*sigma, mu+3*sigma))
plot(Binf, ylim = c(mu-3*sigma, mu+3*sigma))
points(Bsup)
segments(x0 = 1:N, y0 = Binf, y1 = Bsup, col = "red")
plot(Binf, ylim = c(mu-3*sigma, mu+3*sigma))
points(Bsup)
segments(x0 = 1:N, y0 = Binf, y1 = Bsup, col = "orange")
est1 = rowSums(dataG/n-rowMeans(dataG))
est2 = apply(dataG, 1, var)
par(mfrow = c(1,2))
hist(est1, probability = T, xlim = c(0,5))
abline(v = sigma, col = "red", lw = 3)
abline(v = moy_est1, col = "green", lw = 2)
hist(est2, probability = T, xlim = c(0,5))
abline(v = sigma, col = "red", lw = 3)
abline(v = moy_est2, col = "green", lw = 2)
par(mfrow = c(1,2))
hist(est1, probability = T, xlim = c(0,5))
abline(v = sigma, col = "red", lw = 2)
abline(v = moy_est1, col = "green", lw = 3, lty = "dashed")
hist(est2, probability = T, xlim = c(0,5))
abline(v = sigma, col = "red", lw = 2)
abline(v = moy_est2, col = "green",  lw = 3, lty = "dashed")
par(mfrow = c(1,2))
hist(est1, probability = T, xlim = c(0,5))
abline(v = sigma, col = "red", lw = 2)
abline(v = moy_est1*n/(n-1), col = "green", lw = 3, lty = "dashed")
hist(est2, probability = T, xlim = c(0,5))
abline(v = sigma, col = "red", lw = 2)
abline(v = moy_est2, col = "green",  lw = 3, lty = "dashed")
p = 0.3
n = 500
x = rbinom(n,1,p)
moy.taille = cumsum(x)/(1:n)
plot(moy.taille)
abline(h = p)
alpha = 0.05
u = qnorm(1-alpha/2)
delta = sqrt(moy.taille*(1-moy.taille))/sqrt(n)
alpha = 0.05
u = qnorm(1-alpha/2)
delta = sqrt(moy.taille*(1-moy.taille))/sqrt(n)
Binf.taille = moy.taille - detla
alpha = 0.05
u = qnorm(1-alpha/2)
delta = sqrt(moy.taille*(1-moy.taille))/sqrt(n)
Binf.taille = moy.taille - delta
alpha = 0.05
u = qnorm(1-alpha/2)
delta = sqrt(moy.taille*(1-moy.taille))/sqrt(n)
Binf.taille = moy.taille - delta
Bsup.taille = moy.taille + delta
amplitude.taille = 2*delta
plot(amplitude.taille)
alpha = 0.05
u = qnorm(1-alpha/2)
delta = sqrt(moy.taille*(1-moy.taille))/sqrt(n)
Binf.taille = moy.taille - delta
Bsup.taille = moy.taille + delta
alpha = 0.05
u = qnorm(1-alpha/2)
delta = sqrt(moy.taille*(1-moy.taille))/sqrt(n)
Binf.taille = moy.taille - delta
Bsup.taille = moy.taille + delta
amplitude.taille = 2*delta
plot(amplitude.taille)
p = 0.3
n = 500
x = rbinom(n,1,p)
moy.taille = cumsum(x)/(1:n)
plot(moy.taille)
abline(h = p)
alpha = 0.05
u = qnorm(1-alpha/2)
delta = sqrt(moy.taille*(1-moy.taille))/sqrt(n)
Binf.taille = moy.taille - delta
Bsup.taille = moy.taille + delta
amplitude.taille = 2*delta
plot(amplitude.taille)
amplitude.taille = 2*delta
plot(amplitude.taille, type = "l")
abline(h = 0.1, col = "cyan")
amplitude.taille = 2*delta
plot(amplitude.taille, type = "l")
abline(h = 0.1, col = "cyan")
amplitude.taille = 2*delta
plot(1:n,amplitude.taille, type = "l")
abline(h = 0.1, col = "cyan")
prop.test(sum(x).length(x))
prop.test(sum(x), length(x))
prop.test(sum(x), length(x))
prop.test(sum(x), length(x), conf.level = 0.999)
r = prop.test(sum(x),length(x))
ALPHA = seq(0.01,0.30,0.01)
s_x = sum(x)
get.Binf.niveau = function(alpha){
r = prop.test(s_x,n,conf.level = 1-alpha, correct = F)$conf.inte[1]
return(r)
}
get.Bsup.niveau = function(alpha){
r = prop.test(s_x,n,conf.level = 1-alpha, correct = F)$conf.inte[2]
return(r)
}
Binf.niveau = sapply(APLHA,get.Binf.niveau)
ALPHA = seq(0.01,0.30,0.01)
s_x = sum(x)
get.Binf.niveau = function(alpha){
r = prop.test(s_x,n,conf.level = 1-alpha, correct = F)$conf.inte[1]
return(r)
}
get.Bsup.niveau = function(alpha){
r = prop.test(s_x,n,conf.level = 1-alpha, correct = F)$conf.inte[2]
return(r)
}
Binf.niveau = sapply(ALPHA,get.Binf.niveau)
Bsup.niveau = sapply(ALPHA,get.Bsup.niveau)
mu = 1
sigma = 2
n = 1000
x = rnorm(n,mu,sigma)
moy.taille = cumsum(x)/(1:n)
moy2.taille = cumsum(x^2)/(1:n)
var_emp = moy2.taille - moyt.taille^2
mu = 1
sigma = 2
n = 1000
x = rnorm(n,mu,sigma)
moy.taille = cumsum(x)/(1:n)
moy2.taille = cumsum(x^2)/(1:n)
var_emp = moy2.taille - moy.taille^2
plot(var_emp)
p = 0.5
N = 10000
n = 5
rbinom(N*n,1,p)
M = matrix(x,nrow = N)
rowMeans(M) -> xbarn
mean(xbarn) -> mu
var(xbarn) -> sigma2
hist(xbarn)
p = 0.5
N = 10000
n = 5
rbinom(N*n,1,p)
M = matrix(x,nrow = N)
rowMeans(M) -> xbarn
mean(xbarn) -> mu
var(xbarn) -> sigma2
hist(xbarn, probability = T)
mu = 2
sigma = 1
N = 1000
n = 50
x = rnorm(N*n,mu,sigma)
dataG = matrix(x, nrow = N)
mu = 2
sigma = 1
N = 1000
n = 50
x = rnorm(N*n,mu,sigma)
dataG = matrix(x, nrow = N)
risque.theorique.test1 = 1-pnorm(0)
risque.theorique.test2 = 1-pnorm(2)
risque.theorique.test3 = 1-pnorm(3)
cat("risque.theorique.test1", risque.theorique.test1)
cat("\n risque.theorique.test1", risque.theorique.test2)
cat("\n risque.theorique.test1", risque.theorique.test3)
risque.theorique.test1 = 1-pnorm(0)
risque.theorique.test2 = 1-pnorm(2)
risque.theorique.test3 = 1-pnorm(3)
cat("risque.theorique.test1", risque.theorique.test1)
cat("\n risque.theorique.test2", risque.theorique.test2)
cat("\n risque.theorique.test3", risque.theorique.test3)
mu0 = 2
risque.experimental.test1 = sum(x_bar > mu0)/N
mu = 2
sigma = 1
N = 1000
n = 50
x = rnorm(N*n,mu,sigma)
dataG = matrix(x, nrow = N)
x_bar = rowMeans(dataG)
mu0 = 2
risque.experimental.test1 = sum(x_bar > mu0)/N
risque.experimental.test2 = sum(x_bar > mu0+2/sqrt(n))/N
risque.experimental.test3 = sum(x_bar > mu0+3/sqrt(n))/N
cat("risque.experimental.test1", risque.experimental.test1)
cat("\n risque.experimental.test2", risque.experimental.test2)
cat("\n risque.experimental.test3", risque.experimental.test3)
alpha = 5E-2
beta = sigma*qnorm(1-alpha)
cat("beta = ",beta,"\n")
risque.experimental.beta = sum(x_bar > mu0+beta/sqrt(n))/N
cat("rsique.experimental.beta",risque.experimental.beta)
install.packages("EnvStats")
### Création des variables avec les données récoltées (en min)
setwd("~/GitHub/L2_INFO/STA401/TP/Projet")
df <- read.table('INF3-Collomb-Sullivan.csv', header=TRUE, sep=',')
midi <- df$Midi
soir <- df$Soir
### Résumé numérique
summary(df)
sd(midi)
sd(soir)
### Graphique
# Boxplot
boxplot(midi,soir, main="Temps de repas le midi et le soir (en min)", ylab="Temps (en min)", names=c("Midi","Soir"))
# Hist
par(mfrow=c(1,2))
hist(midi, main = "Histogramme des résultats du midi", probability =  TRUE)
curve(dnorm(x,mean(midi),sd(midi)), add = T, col = "red")
hist(soir, main = "Histogramme des résultats du soir", probability =  TRUE)
curve(dnorm(x,mean(soir),sd(soir)), add = T, col = "red")
# Qqnorm
par(mfrow=c(1,2))
qqnorm(midi, main = "Quantile-quantile plot pour les résultats du midi", ylab = "Temps (en min)")
qqline(midi,col="red")
qqnorm(soir, main = "Quantile-quantile plot pour les résultats du soir", ylab = "Temps (en min)")
qqline(soir,col="red")
### Graphique
# Boxplot
boxplot(midi,soir, main="Temps de repas le midi et le soir (en min)", ylab="Temps (en min)", names=c("Midi","Soir"))
# Hist
par(mfrow=c(1,2))
hist(midi, main = "Histogramme des résultats du midi", probability =  TRUE)
curve(dnorm(x,mean(midi),sd(midi)), add = T, col = "red")
hist(soir, main = "Histogramme des résultats du soir", probability =  TRUE)
curve(dnorm(x,mean(soir),sd(soir)), add = T, col = "red")
# Qqnorm
par(mfrow=c(1,2))
qqnorm(midi, main = "Quantile-quantile plot pour les résultats du midi", ylab = "Temps (en min)")
qqline(midi,col="red")
qqnorm(soir, main = "Quantile-quantile plot pour les résultats du soir", ylab = "Temps (en min)")
qqline(soir,col="red")
### Estimation et intervalle de confiance
## Sur la moyenne
t.test(midi)
t.test(soir)
### Création des variables avec les données récoltées (en min)
setwd("~/GitHub/L2_INFO/STA401/TP/Projet")
df <- read.table('INF3-Collomb-Sullivan.csv', header=TRUE, sep=',')
midi <- df$Midi
soir <- df$Soir
### Résumé numérique
summary(df)
sd(midi)
sd(soir)
### Graphique
# Boxplot
boxplot(midi,soir, main="Temps de repas le midi et le soir (en min)", ylab="Temps (en min)", names=c("Midi","Soir"))
# Hist
par(mfrow=c(1,2))
hist(midi, main = "Histogramme des résultats du midi", probability =  TRUE)
curve(dnorm(x,mean(midi),sd(midi)), add = T, col = "red")
hist(soir, main = "Histogramme des résultats du soir", probability =  TRUE)
curve(dnorm(x,mean(soir),sd(soir)), add = T, col = "red")
# Qqnorm
par(mfrow=c(1,2))
qqnorm(midi, main = "Quantile-quantile plot pour les résultats du midi", ylab = "Temps (en min)")
qqline(midi,col="red")
qqnorm(soir, main = "Quantile-quantile plot pour les résultats du soir", ylab = "Temps (en min)")
qqline(soir,col="red")
### Estimation et intervalle de confiance
## Sur la moyenne
t.test(midi)
t.test(soir)
## Sur l'ecart type
# Midi :
n=length(midi)
sx <- sd(midi)
estimate <- sx**2
c=qchisq(1-(0.05/2),df=n-1)
d=qchisq((0.05/2),df=n-1)
C=(n - 1)*estimate/c
D=(n - 1)*estimate/d
paste('L intervalle de confiance recherche est IC(95%)=[',C,D,']')
# Soir
n=length(soir)
sx <- sd(soir)
estimate <- sx**2
c=qchisq(1-(0.05/2),df=n-1)
d=qchisq((0.05/2),df=n-1)
C=(n - 1)*estimate/c
D=(n - 1)*estimate/d
paste('L intervalle de confiance recherche est IC(95%)=[',C,D,']')
### Tests sur un échantillon
# Test de la moyenne avec mu0=27 (trouve avec la moyenne observée)
t.test(midi, mu=27)
# Test de l'ecart type avec sigma0=9 (trouve avec var(soir))
var(soir)
# H0 : sigma(soir) = 140 VS H1 : sigma(soir) != 140
library(EnvStats)
var.test(midi, soir,sigma.squared = 140)
# H0 : sigma(soir) = 140 VS H1 : sigma(soir) != 140
library(EnvStats)
# Test de l'ecart type avec sigma0=9 (trouve avec var(soir))
var(soir)
# H0 : sigma(soir) = 140 VS H1 : sigma(soir) != 140
library(EnvStats)
var.test(midi, soir,sigma.squared = 140)
# Tests sur deux échantillons
# Comparaison des moyennes de deux groupes : test de Student
t.test(midi, soir)
# Test de l'ecart type avec sigma0=9 (trouve avec var(soir))
var(soir)
# H0 : sigma(soir) = 140 VS H1 : sigma(soir) != 140
library(EnvStats)
var.test(midi, soir,sigma.squared = 140)
# Test de l'ecart type avec sigma0=9 (trouve avec var(soir))
var(soir)
### Résumé numérique
summary(df)
# Test de la moyenne avec mu0=27
t.test(soir, mu=33)
# Test de la moyenne avec mu0=33
t.test(soir, mu=33)
## Sur l'ecart type
# Midi :
n=length(midi)
sx <- sd(midi)
estimate <- sx**2
c=qchisq(1-(0.05/2),df=n-1)
d=qchisq((0.05/2),df=n-1)
C=(n - 1)*estimate/c
D=(n - 1)*estimate/d
paste('L intervalle de confiance recherche est IC(95%)=[',C,D,']')
# Soir
n=length(soir)
sx <- sd(soir)
estimate <- sx**2
c=qchisq(1-(0.05/2),df=n-1)
d=qchisq((0.05/2),df=n-1)
C=(n - 1)*estimate/c
D=(n - 1)*estimate/d
paste('L intervalle de confiance recherche est IC(95%)=[',C,D,']')
# Midi :
n=length(midi)
sx <- sd(midi)
estimate <- sx**2
c=qchisq(1-(0.05/2),df=n-1)
d=qchisq((0.05/2),df=n-1)
C=(n - 1)*estimate/c
D=(n - 1)*estimate/d
paste('L intervalle de confiance recherche est IC(95%)=[',C,D,']')
# Soir
n=length(soir)
sx <- sd(soir)
estimate <- sx**2
c=qchisq(1-(0.05/2),df=n-1)
d=qchisq((0.05/2),df=n-1)
C=(n - 1)*estimate/c
D=(n - 1)*estimate/d
paste('L intervalle de confiance recherche est IC(95%)=[',C,D,']')
